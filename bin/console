#!/usr/bin/env php
<?php

/**
 * This file is part of the multitool-for-spotify-php project.
 * @see https://github.com/stevenfoncken/multitool-for-spotify-php
 *
 * @copyright 2023-present Steven Foncken <dev[at]stevenfoncken[dot]de>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 * @license https://github.com/stevenfoncken/multitool-for-spotify-php/blob/master/LICENSE MIT License
 */

$composerAutoload = __DIR__ . '/../vendor/autoload.php';
if (!is_file($composerAutoload)) {
    throw new LogicException('Composer autoload missing. Try running `composer update`.');
}

require_once $composerAutoload;

use Dotenv\Dotenv;
use SpotifyWebAPI\Request;
use SpotifyWebAPI\Session;
use SpotifyWebAPI\SpotifyWebAPI;
use Monolog\Level;
use Monolog\Logger;
use Monolog\ErrorHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Processor\UidProcessor;
//use Monolog\Formatter\JsonFormatter;
use Monolog\Handler\RotatingFileHandler;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\CommandLoader\FactoryCommandLoader;
use StevenFoncken\MultiToolForSpotify\Command\AuthCommand;
use StevenFoncken\MultiToolForSpotify\Command\ArchiveCommand;
use StevenFoncken\MultiToolForSpotify\Command\ListArchivedPlaylistsCommand;
use StevenFoncken\MultiToolForSpotify\Command\DeleteArchivedPlaylistsCommand;
use StevenFoncken\MultiToolForSpotify\Command\SearchTrackInLibraryCommand;
use StevenFoncken\MultiToolForSpotify\Command\CreateArtistCatalogPlaylistCommand;
use StevenFoncken\MultiToolForSpotify\Command\PlaygroundCommand;
use StevenFoncken\MultiToolForSpotify\Service\AuthService;
use StevenFoncken\MultiToolForSpotify\Service\PlaylistService;
use StevenFoncken\MultiToolForSpotify\Service\TrackService;
use StevenFoncken\MultiToolForSpotify\Service\ArtistService;
use StevenFoncken\MultiToolForSpotify\Service\MailService;
//use StevenFoncken\MultiToolForSpotify\Monolog\Handler\ArchivedPlaylistsHandler;

const LOG_DIR_PATH = __DIR__ . '/../var/log/';

const CONFIG_DIR_PATH = __DIR__ . '/../config/';

const ACCESS_TOKEN_PATH = CONFIG_DIR_PATH . '.access_token';

const REFRESH_TOKEN_PATH = CONFIG_DIR_PATH . '.refresh_token';

const LAST_RUN_LOG_PATH = LOG_DIR_PATH . 'last_run.log';

// ---

// Init envloader
$dotenv = Dotenv::createImmutable(CONFIG_DIR_PATH);
$dotenv->load();
$dotenv->required(
        [
            'APP_DEBUG_MODE',
            'SPOTIFY_API_CLIENT_ID',
            'SPOTIFY_API_CLIENT_SECRET',
            'SPOTIFY_API_REDIRECT_URI',
            'MAILER_DSN',
            'MAILER_FROM',
            'MAILER_TO',
        ]
)->notEmpty();
$dotenv->required('APP_DEBUG_MODE')->isBoolean();

// ---

date_default_timezone_set($_ENV['APP_TIMEZONE']);

// ---

// Init monolog
$logLevel = $_ENV['APP_DEBUG_MODE'] === 'true' ? Level::Debug : Level::Info;

$uidProcessor = new UidProcessor(16);

$errorToConsoleHandler = new StreamHandler('php://stderr', Level::Error);

$rotatingFileHandler = new RotatingFileHandler(LOG_DIR_PATH . 'mtfsp.log', 16, $logLevel);
/*
$archivedPlaylistsHandler = new ArchivedPlaylistsHandler(
        new StreamHandler(LOG_DIR_PATH . 'archived_playlists.log', $logLevel)
);
$archivedPlaylistsHandler->setFormatter(new JsonFormatter());
*/
file_put_contents(LAST_RUN_LOG_PATH, ''); // Clear last_run log
$currentRunHandler = new StreamHandler(LAST_RUN_LOG_PATH, Level::Info);

$logger = new Logger('mtfsp', [$errorToConsoleHandler, $rotatingFileHandler, /*$archivedPlaylistsHandler,*/ $currentRunHandler], [$uidProcessor]);
ErrorHandler::register($logger);

// ---

// Init SpotifyWebAPI
$spotifyRequest = new Request(
    [
        'curl_options' => [
            CURLOPT_TIMEOUT => 600,
        ]
    ]
);

// -

$spotifySession = new Session(
    $_ENV['SPOTIFY_API_CLIENT_ID'],
    $_ENV['SPOTIFY_API_CLIENT_SECRET'],
    $_ENV['SPOTIFY_API_REDIRECT_URI'],
    $spotifyRequest
);

touch(ACCESS_TOKEN_PATH);
touch(REFRESH_TOKEN_PATH);
$accessToken = file_get_contents(ACCESS_TOKEN_PATH);
$refreshToken = file_get_contents(REFRESH_TOKEN_PATH);

$spotifySession->setAccessToken($accessToken);
$spotifySession->setRefreshToken($refreshToken);

// -

$options = [
    'auto_refresh' => true,
    'auto_retry' => true,
];

$spotifyApi = new SpotifyWebAPI(
    $options,
    $spotifySession,
    $spotifyRequest
);

// ---

// Init DB TODO
try {
    $pdo = new \PDO($_ENV['PDO_DSN']);//TODO env
    $pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);

    $stmt = $pdo->prepare(file_get_contents(__DIR__ . '/../fixtures/database_schema.sql'));
    $stmt->execute();


} catch (\PDOException $e) {
    echo 'PDO error: ' . $e->getMessage();
}

// ---

// Lazy-load commands
$commandLoader = new FactoryCommandLoader(
    [
        'mtfsp:auth' => static function () use ($spotifySession): Command {
            return new AuthCommand(
                new AuthService($spotifySession)
            );
        },
        'mtfsp:archive' => static function () use ($logger, $spotifyApi): Command {
            return new ArchiveCommand(
                $logger->withName('archive_command'),
                new PlaylistService($spotifyApi, $logger->withName('playlist_service')),
                new MailService(
                        $_ENV['MAILER_DSN'],
                        $_ENV['MAILER_FROM'],
                        $_ENV['MAILER_TO'],
                        LAST_RUN_LOG_PATH,
                        $logger->withName('mail_service')
                )
            );
        },
        'mtfsp:archive:list-playlists' => static function () use ($logger, $spotifyApi): Command {
            return new ListArchivedPlaylistsCommand(
                new PlaylistService($spotifyApi, $logger->withName('playlist_service'))
            );
        },
        'mtfsp:archive:delete-playlists' => static function () use ($logger, $spotifyApi): Command {
            return new DeleteArchivedPlaylistsCommand(
                $logger->withName('delete-archived-playlists_command'),
                new PlaylistService($spotifyApi, $logger->withName('playlist_service'))
            );
        },
        'mtfsp:search:track-in-library' => static function () use ($logger, $spotifyApi): Command {
            return new SearchTrackInLibraryCommand(
                new PlaylistService($spotifyApi, $logger->withName('playlist_service')),
                new TrackService($spotifyApi, $logger->withName('track_service'))
            );
        },
        'mtfsp:artist:catalog-to-playlist' => static function () use ($logger, $spotifyApi): Command {
            return new CreateArtistCatalogPlaylistCommand(
                $logger->withName('artist-catalog-to-playlist_command'),
                new PlaylistService($spotifyApi, $logger->withName('playlist_service')),
                new ArtistService($spotifyApi, $logger->withName('artist_service'))
            );
        },
        'mtfsp:playground' => static function () use ($logger, $spotifyApi): Command {
            return new PlaygroundCommand(
                $logger->withName('playground_command'),
                new PlaylistService($spotifyApi, $logger->withName('playlist_service')),
                new TrackService($spotifyApi, $logger->withName('track_service')),
                new ArtistService($spotifyApi, $logger->withName('artist_service'))
            );
        },
    ]
);

$application = new Application('Multi-Tool for Spotify - Console Application', 'v1.0.0'); // --version
$application->setCatchExceptions(true);
$application->setCommandLoader($commandLoader);
$application->run();

// ---

$newAccessToken = $spotifySession->getAccessToken();
$newRefreshToken = $spotifySession->getRefreshToken();

file_put_contents(ACCESS_TOKEN_PATH, $newAccessToken);
file_put_contents(REFRESH_TOKEN_PATH, $newRefreshToken);
